//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RepairServiceProgram.DataDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RepairServiceDBEntities : DbContext
    {
        public RepairServiceDBEntities()
            : base("name=RepairServiceDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Comments> Comments { get; set; }
        public virtual DbSet<LoginData> LoginData { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<OrdersStatus> OrdersStatus { get; set; }
        public virtual DbSet<RepairParts> RepairParts { get; set; }
        public virtual DbSet<Techs> Techs { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UserTypes> UserTypes { get; set; }
    
        public virtual ObjectResult<AnalyzeRequestProcessingTime_Result> AnalyzeRequestProcessingTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalyzeRequestProcessingTime_Result>("AnalyzeRequestProcessingTime");
        }
    
        public virtual int AssignMasterToRequest(Nullable<int> orderID, Nullable<int> masterEmployeeID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var masterEmployeeIDParameter = masterEmployeeID.HasValue ?
                new ObjectParameter("MasterEmployeeID", masterEmployeeID) :
                new ObjectParameter("MasterEmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignMasterToRequest", orderIDParameter, masterEmployeeIDParameter);
        }
    
        public virtual int CompleteRepairRequest(Nullable<int> orderID, Nullable<int> repairPartsID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var repairPartsIDParameter = repairPartsID.HasValue ?
                new ObjectParameter("RepairPartsID", repairPartsID) :
                new ObjectParameter("RepairPartsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompleteRepairRequest", orderIDParameter, repairPartsIDParameter);
        }
    
        public virtual int CreateRepairRequest(Nullable<int> customerID, Nullable<int> techID, string description)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var techIDParameter = techID.HasValue ?
                new ObjectParameter("TechID", techID) :
                new ObjectParameter("TechID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateRepairRequest", customerIDParameter, techIDParameter, descriptionParameter);
        }
    
        public virtual int EditRepairRequest(Nullable<int> orderID, Nullable<int> techID, string description)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var techIDParameter = techID.HasValue ?
                new ObjectParameter("TechID", techID) :
                new ObjectParameter("TechID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditRepairRequest", orderIDParameter, techIDParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<GenerateRepairReport_Result> GenerateRepairReport(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateRepairReport_Result>("GenerateRepairReport", orderIDParameter);
        }
    
        public virtual ObjectResult<GetOrdersByCustomer_Result> GetOrdersByCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersByCustomer_Result>("GetOrdersByCustomer", customerIDParameter);
        }
    
        public virtual int RegisterRepairRequest(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterRepairRequest", orderIDParameter);
        }
    }
}
